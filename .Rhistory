mean <- array()
sd <- array()
mean[1] <- mean(data$monthly.average[which(data$status == 1)])
sd[1] <- sd(data$monthly.average[which(data$status == 1)])
mean[2] <- mean(data$monthly.average[which(data$status == 2)])
sd[2] <- sd(data$monthly.average[which(data$status == 2)])
mean[3] <- mean(data$monthly.average[which(data$status == 3)])
sd[3] <- sd(data$monthly.average[which(data$status == 3)])
df <- data.frame(mean, sd)
rownames(df) <- c("undergraduate", "graduate", "work")
# dispaly
df
data$status[which(data$status == 1)] <- "undergraduate"
data$status[which(data$status == 2)] <- "graduate"
data$status[which(data$status == 3)] <- "work"
ggplot() +
geom_boxplot(data = data, aes(x = status, y = monthly.average)) +
labs(title = "Boxplot of monthly mean takeout times", y = "Monthly mean of takeout times")
fit1 <- lm(monthly.average ~ factor(status), data = data)
summary(fit1)
### Modeling (10pts)
fit1 <- lm(scale_mean ~ factor(status), data = data)
summary(fit1)
### Validation (10pts)
# External validation:
par(mfrow = c(2, 2))
plot(fit1)
# External validation:
par(mfrow = c(2, 2))
plot(fit1)
# External validation:
par(mfrow = c(2, 2))
plot(fit1)
### Inference (10pts)
confint(fit1)
coefplot(fit1)
ggplot() +
geom_boxplot(data = data, aes(x = status, y = monthly.average)) +
ylim(0, 23) +
labs(title = "Boxplot of monthly mean takeout times", y = "Monthly mean of takeout times")
ggplot() +
geom_boxplot(data = data, aes(x = status, y = monthly.average)) +
ylim(0, 23) +
labs(title = "Boxplot of monthly mean takeout times", y = "Monthly mean of takeout times")
View(data)
df <- data[data$monthly.average<60, 0]
ggplot() +
geom_boxplot(data = df, aes(x = status, y = monthly.average)) +
ylim(0, 23) +
labs(title = "Boxplot of monthly mean takeout times", y = "Monthly mean of takeout times")
df <- data[data$monthly.average<60, ]
ggplot() +
geom_boxplot(data = df, aes(x = status, y = monthly.average)) +
ylim(0, 23) +
labs(title = "Boxplot of monthly mean takeout times", y = "Monthly mean of takeout times")
df <- data[data$monthly.average<60, ]
ggplot() +
geom_boxplot(data = df, aes(x = status, y = monthly.average)) +
ylim(0, 23) +
labs(title = "Boxplot of monthly mean takeout times", y = "Monthly mean of takeout times")
### Modeling (10pts)
fit1 <- lm(scale_mean ~ factor(status), data = df)
summary(fit1)
### Modeling (10pts)
fit1 <- lm(monthly.average ~ factor(status), data = df)
summary(fit1)
fit1 <- lm(monthly.average ~ factor(status), data = df)
summary(fit1)
# External validation:
par(mfrow = c(2, 2))
plot(fit1)
### Inference (10pts)
confint(fit1)
coefplot(fit1)
?coeplot
?coefplot
??coefplot
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("ggplot2", "gridExtra", "arm")
confint(fit1)
confint(fit1)
coefplot(fit1)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("ggplot2", "arm", "pwr")
pwr.anova.test(k = 3, f = 0.25, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 3, f = 0.25, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 3, n = 6, f = 0.25, sig.level = 0.05)
View(happy)
pwr.anova.test(k = 3, n = 6, f = 0.25, sig.level = 0.05)
### Power Analysis (10pts)
pwr.anova.test(k = 3, n = 6, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 3, n = 6, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 3, f = 0.25, sig.level = 0.05, power = 0.8)
data <- read.csv("/Users/amelia/Documents/mssp/MA615/MA615_Midterm/PublicAssistanceFundedProjectsDetails.csv")
summary(data$declarationDate)
library(magrittr)
data %<>% seperate(declarationDate, c("YYMMDD", "Time"), sep = "T")
data %<>% separate(declarationDate, c("YYMMDD", "Time"), sep = "T")
saperate
?separate
library(tidyr)
data %<>% separate(declarationDate, c("YYMMDD", "Time"), sep = "T")
data$year <- as.numeric(substr(data$YYMMDD, 1, 4))
unique(data$year)
data <- data[which(data$year >= 2009 & data$year <= 2018), ]
unique(data$year)
data <- read.csv("/Users/amelia/Documents/mssp/MA615/MA615_Midterm/PublicAssistanceFundedProjectsDetails.csv")
data$declarationData %<>% as.Date()
a<- <- as.Date(data$declarationDate)
a <- as.Date(data$declarationDate)
head(a, 10)
data$YYMMDD <- as.Date(data$declarationDate)
data <- read.csv("/Users/amelia/Documents/mssp/MA615/MA615_Midterm/PublicAssistanceFundedProjectsDetails.csv")
# select year/month/day from colume'declarationData'
data %<>% separate(declarationDate, c("YYMMDD", "Time"), sep = "T")
data$year <- as.numeric(substr(data$YYMMDD, 1, 4))
# load data
data <- read.csv("/Users/amelia/Documents/mssp/MA615/MA615_Midterm/PublicAssistanceFundedProjectsDetails.csv")
# select year/month/day from colume'declarationData'
data %<>% separate(declarationDate, c("YYMMDD", "time"), sep = "T")
data$year <- as.numeric(substr(data$YYMMDD, 1, 4))
data <- data[which(data$year >= 2009 & data$year <= 2018), ]
data %<>% subset(YYMMDD)
unique(data$incidentType)
data <- data[which(data$year >= 2009 & data$year <= 2018 & data$incidentType == "Hurricane"), ]
View(data)
unique(projectSize)
unique(data$projectSize)
data("hurr_tracks")
library(hurricaneexposuredata)
library(hurricaneexposure)
data("hurr_tracks")
data("rain")
data(county.fips)
force(hurr_tracks)
force(rain)
library(maps)
data(county.fips)
force(county.fips)
# load data
data <- read.csv("/Users/amelia/Documents/mssp/MA615/MA615_Midterm/PublicAssistanceFundedProjectsDetails.csv")
# add a column "YYMMDD"
data %<>% separate(declarationDate, c("YYMMDD", "time"), sep = "T")
# add a column "year"
data$year <- as.numeric(substr(data$YYMMDD, 1, 4))
# select hurricane from 2009-2018
data %<>% filter(year >= 2009 & year <= 2018 & incidentType == "Hurricane")
hurr_tracks %<>% filter
# select hurricane from 2009-2018
data %<>% filter(year >= 2009 & year <= 2018 & incidentType == "Hurricane")
# select hurricane from 2009-2018
data <- filter(data, year >= 2009 & year <= 2018 & incidentType == "Hurricane")
# select hurricane from 2009-2018
data <- data[which(data$year >= 2009 & data$year <= 2018 & data$incidentType == "Hurricane"), ]
hurr_tracks %<>% filter
hurr_tracks$year <- as.numeric(substr(hurr_tracks$date, 1, 4))
hurr_tracks %<>% filter(year >=2009 & year <=2018)
hurr_tracks %<>% filter(hurr_tracks$year >=2009 & hurr_tracks$year <=2018)
hurr_tracks <- hurr_tracks[year >=2009 & year <=2018, ]
hurr_tracks <- hurr_tracks[which(hurr_tracks$year >=2009 & hurr_tracks$year <=2018), ]
hurr_tracks %<>% subset(year >=2009)
hurr_tracks <- subset(hurr_tracks$year >=2009)
data("hurr_tracks")
hurr_tracks$year <- as.numeric(substr(hurr_tracks$date, 1, 4))
hurr_tracks <- subset(year >= 2009 & year <= 2018)
hurr_tracks %<>% subset(year >= 2009 & year <= 2018)
# select hurricane from 2009-2018
data %<>% subset(year >= 2009 & year <= 2018 & incidentType == "Hurricane")
hurr_tracks$year <- as.numeric(substr(hurr_tracks$date, 1, 4))
hurr_tracks %<>% subset(year >= 2009 & year <= 2018)
unique(data$totalObligated-data$federalShareObligated)
unique(data$disasterNumber)
count(unique(data$disasterNumber))
sum(unique(data$disasterNumber)>0)
sum(unique(hurr_tracks$storm_id)>0)
library(usmap)
library(dplyr)
library(tidyverse)
library(drat)
library(hurricaneexposuredata)
library(hurricaneexposure)
library(ggplot2)
library(maps)
library(tmap)
library(leaflet)
library(sf)
library(sp)
library(usmap)
library(dplyr)
library(tidyverse)
library(drat)
library(hurricaneexposuredata)
library(hurricaneexposure)
library(ggplot2)
library(maps)
library(tmap)
library(leaflet)
library(sf)
library(sp)
library(lubridate)
library(readr)
library(kableExtra)
library(magrittr)
library(gridExtra)
#import data
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
?read_csv
head(PAFPD)
summary(PAFPD)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(usmap, dplyr, tidyverse, drat, hurricaneexposuredata, ggplot2, maps, tmap, leaflet, sf, sp, lubridate, readr, kableExtra, magrittr, gridExtra, knitr)
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
head(PAFPD)
PAFPD$beginyear <- year(PAFPD$declarationDate)
PAFPD_0918 <- filter(PAFPD,beginyear > 2008 & beginyear < 2019 & incidentType == "Hurricane")
PAFPD_0918$stateNumberCode <- as.numeric(PAFPD_0918$stateNumberCode)
PAFPD_0918$countyCode <- as.numeric(PAFPD_0918$countyCode)
PAFPD_0918$fips <- 1000*PAFPD_0918$stateNumberCode+PAFPD_0918$countyCode
PAFPD_0918 <- filter(PAFPD_0918,projectAmount>=0)
head(PAFPD_0918)
statesum <- PAFPD_0918 %>% group_by(state) %>% summarize(sum = sum(projectAmount))
statesum[rev(order(statesum$sum)),]
statesum[rev(order(statesum$sum)),]%>% knitr::kables()
as.dataframe(statesum[rev(order(statesum$sum)),])
as.data.frame(statesum[rev(order(statesum$sum)),])
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
as.data.frame(head(PAFPD, 5))
as.data.frame(head(PAFPD, 5)) %>% kables()
PAFPD$beginyear <- year(PAFPD$declarationDate)
PAFPD_0918 <- filter(PAFPD,beginyear > 2008 & beginyear < 2019 & incidentType == "Hurricane")
PAFPD_0918$stateNumberCode <- as.numeric(PAFPD_0918$stateNumberCode)
PAFPD_0918$countyCode <- as.numeric(PAFPD_0918$countyCode)
PAFPD_0918$fips <- 1000*PAFPD_0918$stateNumberCode+PAFPD_0918$countyCode
PAFPD_0918 <- filter(PAFPD_0918,projectAmount>=0)
as.data.frame(head(PAFPD_0918))
## total projectAmount for each state
statesum <- PAFPD_0918 %>% group_by(state) %>% summarize(sum = sum(projectAmount))
as.data.frame(statesum[rev(order(statesum$sum)),])
## total projectAmount for each state
yearsum <- PAFPD_0918 %>% group_by(beginyear) %>% summarize(sum = sum(projectAmount))
as.data.frame(yearsum[rev(order(yearsum$sum)),])
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
as.data.frame(head(PAFPD, 5))[, 4]
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
as.data.frame(head(PAFPD, 5))[, 1:4]
PAFPD$beginyear <- year(PAFPD$declarationDate)
PAFPD_0918 <- filter(PAFPD,beginyear > 2008 & beginyear < 2019 & incidentType == "Hurricane")
PAFPD_0918$stateNumberCode <- as.numeric(PAFPD_0918$stateNumberCode)
PAFPD_0918$countyCode <- as.numeric(PAFPD_0918$countyCode)
PAFPD_0918$fips <- 1000*PAFPD_0918$stateNumberCode+PAFPD_0918$countyCode
PAFPD_0918 <- filter(PAFPD_0918,projectAmount>=0)
as.data.frame(head(PAFPD_0918, 5))[, 1:4]
##sum of projectAmount for different projectSize
sizesum <- PAFPD_0918 %>% group_by(projectSize) %>% summarize(sum = sum(projectAmount))
sizesum
##sum of projectAmount for different projectSize
sizesum <- PAFPD_0918 %>% group_by(projectSize) %>% summarize(sum = sum(projectAmount))
sizesum
##barplot of projectAmount for different projectSize
ggplot(data = sizesum, mapping = aes(x = factor(projectSize), y = sum, fill = factor(projectSize))) +
geom_bar(stat = "identity") +
guides(fill = F) +
xlab("projectSize") +
ylab("sum of projectAmount") +
ggtitle("Barplot of projectAmount for different projectSize") +
theme(plot.title = element_text(hjust = 0.5))
##sum of projectAmount for different damageCategory
dccsum <- PAFPD_0918 %>% group_by(dcc) %>% summarize(sum = sum(projectAmount))
dccsum[rev(order(dccsum$sum)),]
##sum of projectAmount for different damageCategory
dccsum <- PAFPD_0918 %>% group_by(dcc) %>% summarize(sum = sum(projectAmount))
dccsum[rev(order(dccsum$sum)),]
##Barplot of projectAmount for different damageCategory
ggplot(data = dccsum, mapping = aes(x = dcc, y = sum, fill = dcc)) +
geom_bar(stat = "identity") +
guides(fill=guide_legend(title=NULL)) +
scale_fill_discrete(labels=c("A-Debris Utilities", "B-Protective Measures", "C-Roads and Bridges", "D-Water Control Facilities", "E-Public Buildings", "F-Public Utilities", "G-Recreational or Other", "Z-State Management")) +
xlab("damageCatrgory") +
ylab("sum of projectAmount") +
ggtitle("Barplot of projectAmount for different damageCategory") +
theme(plot.title = element_text(hjust = 0.5))
library(usmap)
library(dplyr)
library(tidyverse)
library(drat)
library(hurricaneexposuredata)
library(hurricaneexposure)
library(ggplot2)
library(maps)
library(tmap)
library(leaflet)
library(sf)
library(sp)
library(lubridate)
library(readr)
library(kableExtra)
library(magrittr)
library(gridExtra)
#import data
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
PAFPD$beginyear <- year(PAFPD$declarationDate)
PAFPD_0918 <- filter(PAFPD,beginyear > 2008 & beginyear < 2019 & incidentType == "Hurricane")
PAFPD_0918$stateNumberCode <- as.numeric(PAFPD_0918$stateNumberCode)
PAFPD_0918$countyCode <- as.numeric(PAFPD_0918$countyCode)
PAFPD_0918$fips <- 1000*PAFPD_0918$stateNumberCode+PAFPD_0918$countyCode
PAFPD_0918 <- filter(PAFPD_0918,projectAmount>=0)
#combine the fips with maps data
##county
data(county.fips)
mapcounty=st_as_sf(map('county',plot=F,fill=T))
colnames(county.fips)[2]=colnames(mapcounty)[1]
mapcounty=left_join(mapcounty,county.fips,'ID')
##state
data(state.fips)
mapstate=st_as_sf(map('state',plot = F,fill = T))
colnames(state.fips)[6]=colnames(mapstate)[1]
mapstate=left_join(mapstate,state.fips,'ID')
mapstate[20,2:6]<-c(25,22,1,1,"MA")
mapstate[21,2:6]<-c(26,23,2,3,"MI")
mapstate[31,2:6]<-c(36,33,1,2,"NY")
mapstate[32,2:6]<-c(37,34,3,5,"NC")
mapstate[45,2:6]<-c(51,49,3,5,"VA")
mapstate[46,2:6]<-c(53,50,4,9,"WA")
colnames(mapstate)[2] <- "stateNumberCode"
mapstate$stateNumberCode<- as.numeric(mapstate$stateNumberCode)
#combine data
#by state
hurricane_group<- group_by(PAFPD_0918, stateNumberCode)
h_GroupByfips<- summarise(hurricane_group,sumcost = sum(projectAmount))
h_GroupByfips<- h_GroupByfips[order(h_GroupByfips$sumcost,decreasing=F),]
hcount_s <- right_join(mapstate,h_GroupByfips,"stateNumberCode")
#by county
hurricane_group <- filter(PAFPD_0918,countyCode!=0)
hurricane_group<- group_by(hurricane_group, fips)
h_GroupByfips<- summarise(hurricane_group,sumcost = sum(projectAmount))
h_GroupByfips<- h_GroupByfips[order(h_GroupByfips$sumcost,decreasing=F),]
hcount_c <- right_join(mapcounty,h_GroupByfips,"fips")
hcount_c <- filter(hcount_c,is.na(ID)==F)
hcount_c2 <- filter(hcount_c,sumcost<200000000)
hcount_c3 <- filter(hcount_c,sumcost>200000000)
#leaflet
#state
pal <- colorNumeric("YlOrRd",domain=hcount_s$sumcost)
pop <- paste("State:",hcount_s$ID,"<br/>",
"estimated total cost:",hcount_s$sumcost,"$","<br/>")
leaflet(hcount_s)%>%
addTiles()%>%
addPolygons(data = hcount_s,fillColor=~pal(hcount_s$sumcost),
stroke = T,popup=pop,fillOpacity = 0.5,weight = 0.5,
color = "gray")%>%
addLegend("bottomright",values = ~sumcost,pal = pal,
title = "estimated total cost")
#county
#higher than 200,000,000
pal2 <- colorNumeric("PuRd",domain=hcount_c3$sumcost)
pop2 <- paste("County:",hcount_c3$ID,"<br/>",
"estimated total cost:",hcount_c3$sumcost,"$","<br/>")
leaflet(hcount_c3)%>%
addTiles()%>%
addPolygons(data = hcount_c3,fillColor=~pal2(hcount_c3$sumcost),
stroke = T,popup=pop2,fillOpacity = 0.7,weight = 0.5,
color = "gray")%>%
addLegend("bottomright",values = ~sumcost,pal = pal2,
title = "estimated total cost")
#under 200,000,000
pal3 <- colorNumeric("PuRd",domain=hcount_c2$sumcost)
pop3 <- paste("County:",hcount_c2$ID,"<br/>",
"estimated total cost:",hcount_c2$sumcost,"$","<br/>")
leaflet(hcount_c2)%>%
addTiles()%>%
addPolygons(data = hcount_c2,fillColor=~pal3(hcount_c2$sumcost),
stroke = T,popup=pop2,fillOpacity = 0.7,weight = 0.5,
color = "gray")%>%
addLegend("bottomright",values = ~sumcost,pal = pal3,
title = "estimated total cost")
#combine the fips with maps data
##county
data(county.fips)
mapcounty=st_as_sf(map('county',plot=F,fill=T))
colnames(county.fips)[2]=colnames(mapcounty)[1]
mapcounty=left_join(mapcounty,county.fips,'ID')
##state
data(state.fips)
mapstate=st_as_sf(map('state',plot = F,fill = T))
colnames(state.fips)[6]=colnames(mapstate)[1]
mapstate=left_join(mapstate,state.fips,'ID')
mapstate[20,2:6]<-c(25,22,1,1,"MA")
mapstate[21,2:6]<-c(26,23,2,3,"MI")
mapstate[31,2:6]<-c(36,33,1,2,"NY")
mapstate[32,2:6]<-c(37,34,3,5,"NC")
mapstate[45,2:6]<-c(51,49,3,5,"VA")
mapstate[46,2:6]<-c(53,50,4,9,"WA")
colnames(mapstate)[2] <- "stateNumberCode"
mapstate$stateNumberCode<- as.numeric(mapstate$stateNumberCode)
#combine data
#by state
hurricane_group<- group_by(PAFPD_0918, stateNumberCode)
h_GroupByfips<- summarise(hurricane_group,sumcost = sum(projectAmount))
h_GroupByfips<- h_GroupByfips[order(h_GroupByfips$sumcost,decreasing=F),]
hcount_s <- right_join(mapstate,h_GroupByfips,"stateNumberCode")
#by county
hurricane_group <- filter(PAFPD_0918,countyCode!=0)
hurricane_group<- group_by(hurricane_group, fips)
h_GroupByfips<- summarise(hurricane_group,sumcost = sum(projectAmount))
h_GroupByfips<- h_GroupByfips[order(h_GroupByfips$sumcost,decreasing=F),]
hcount_c <- right_join(mapcounty,h_GroupByfips,"fips")
hcount_c <- filter(hcount_c,is.na(ID)==F)
hcount_c2 <- filter(hcount_c,sumcost<200000000)
hcount_c3 <- filter(hcount_c,sumcost>200000000)
#combine the fips with maps data
##county
data(county.fips)
mapcounty=st_as_sf(map('county',plot=F,fill=T))
colnames(county.fips)[2]=colnames(mapcounty)[1]
mapcounty=left_join(mapcounty,county.fips,'ID')
##state
data(state.fips)
mapstate=st_as_sf(map('state',plot = F,fill = T))
colnames(state.fips)[6]=colnames(mapstate)[1]
mapstate=left_join(mapstate,state.fips,'ID')
mapstate[20,2:6]<-c(25,22,1,1,"MA")
mapstate[21,2:6]<-c(26,23,2,3,"MI")
mapstate[31,2:6]<-c(36,33,1,2,"NY")
mapstate[32,2:6]<-c(37,34,3,5,"NC")
mapstate[45,2:6]<-c(51,49,3,5,"VA")
mapstate[46,2:6]<-c(53,50,4,9,"WA")
colnames(mapstate)[2] <- "stateNumberCode"
mapstate$stateNumberCode<- as.numeric(mapstate$stateNumberCode)
#combine data
#by state
hurricane_group<- group_by(PAFPD_0918, stateNumberCode)
h_GroupByfips<- summarise(hurricane_group,sumcost = sum(projectAmount))
h_GroupByfips<- h_GroupByfips[order(h_GroupByfips$sumcost,decreasing=F),]
hcount_s <- right_join(mapstate,h_GroupByfips,"stateNumberCode")
#by county
hurricane_group <- filter(PAFPD_0918,countyCode!=0)
hurricane_group<- group_by(hurricane_group, fips)
h_GroupByfips<- summarise(hurricane_group,sumcost = sum(projectAmount))
h_GroupByfips<- h_GroupByfips[order(h_GroupByfips$sumcost,decreasing=F),]
hcount_c <- right_join(mapcounty,h_GroupByfips,"fips")
hcount_c <- filter(hcount_c,is.na(ID)==F)
hcount_c2 <- filter(hcount_c,sumcost<200000000)
hcount_c3 <- filter(hcount_c,sumcost>200000000)
#leaflet
#state
pal <- colorNumeric("YlOrRd",domain=hcount_s$sumcost)
pop <- paste("State:",hcount_s$ID,"<br/>",
"estimated total cost:",hcount_s$sumcost,"$","<br/>")
leaflet(hcount_s)%>%
addTiles()%>%
addPolygons(data = hcount_s,fillColor=~pal(hcount_s$sumcost),
stroke = T,popup=pop,fillOpacity = 0.5,weight = 0.5,
color = "gray")%>%
addLegend("bottomright",values = ~sumcost,pal = pal,
title = "estimated total cost")
#county
#higher than 200,000,000
pal2 <- colorNumeric("PuRd",domain=hcount_c3$sumcost)
pop2 <- paste("County:",hcount_c3$ID,"<br/>",
"estimated total cost:",hcount_c3$sumcost,"$","<br/>")
leaflet(hcount_c3)%>%
addTiles()%>%
addPolygons(data = hcount_c3,fillColor=~pal2(hcount_c3$sumcost),
stroke = T,popup=pop2,fillOpacity = 0.7,weight = 0.5,
color = "gray")%>%
addLegend("bottomright",values = ~sumcost,pal = pal2,
title = "estimated total cost")
rank10<-data.frame(county=1:10,funding=1:10)
rank10$county <- hcount_c3$ID
rank10$funding <- hcount_c3$sumcost
kable(rank10[order(rank10$funding,decreasing=T),])
rank10<-data.frame(county=1:10,funding=1:10)
rank10$county <- hcount_c3$ID
rank10$funding <- hcount_c3$sumcost
kable(rank10[order(rank10$funding,decreasing=T),])
kable(statesum[rev(order(statesum$sum)),])
## total projectAmount for each state
statesum <- PAFPD_0918 %>% group_by(state) %>% summarize(sum = sum(projectAmount))
as.data.frame(statesum[rev(order(statesum$sum)),])[1:10, ]
kable(statesum[rev(order(statesum$sum)),])
kable(statesum[rev(order(statesum$sum)),])[1:5,]
kable(statesum[rev(order(statesum$sum))[1:5],])
## total projectAmount for each state
statesum <- PAFPD_0918 %>% group_by(state) %>% summarize(sum = sum(projectAmount))
kable(statesum[rev(order(statesum$sum))[1:10],])
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
as.data.frame(head(PAFPD, 5))[, 1:5]
kable(head(PAFPD, 5))
setwd("/Users/amelia/Documents/mssp/MA615/MA615_Midterm")
PAFPD <- read_csv("PublicAssistanceFundedProjectsDetails.csv")
as.data.frame(head(PAFPD, 5))[, 1:5]
kable(PAFPD[1:5, 1:5])
#under 200,000,000
pal3 <- colorNumeric("PuRd",domain=hcount_c2$sumcost)
pop3 <- paste("County:",hcount_c2$ID,"<br/>",
"estimated total cost:",hcount_c2$sumcost,"$","<br/>")
leaflet(hcount_c2)%>%
addTiles()%>%
addPolygons(data = hcount_c2,fillColor=~pal3(hcount_c2$sumcost),
stroke = T,popup=pop2,fillOpacity = 0.7,weight = 0.5,
color = "gray")%>%
addLegend("bottomright",values = ~sumcost,pal = pal3,
title = "estimated total cost")
kable(hcount_c3)
install.packages("revealjs")
